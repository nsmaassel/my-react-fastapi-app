# AZURE_DEPLOYMENT: GitHub Actions workflow for production deployment
# PIPELINE_TYPE: GitHub Actions
# DEPLOYMENT_ENVIRONMENT: Production
# DEPLOYMENT_TARGET: Azure Container Apps

name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Verify build and tests
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --build --exit-code-from e2e e2e
      env:
        DOCKER_BUILDKIT: 1

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ vars.AZURE_APP_HOSTNAME }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push images
      env:
        ACR_REGISTRY: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        IMAGE_TAG: ${{ github.sha }}
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1
      run: |
        # Build using docker-compose with production config
        docker-compose -f docker-compose.yml -f docker-compose.ci.yml build \
          --build-arg API_URL=https://api.${{ vars.AZURE_APP_HOSTNAME }}
        
        # Tag and push images
        docker tag my-react-fastapi-app_frontend:latest $ACR_REGISTRY/frontend:$IMAGE_TAG
        docker tag my-react-fastapi-app_frontend:latest $ACR_REGISTRY/frontend:latest
        docker tag my-react-fastapi-app_backend:latest $ACR_REGISTRY/backend:$IMAGE_TAG
        docker tag my-react-fastapi-app_backend:latest $ACR_REGISTRY/backend:latest
        
        docker push $ACR_REGISTRY/frontend:$IMAGE_TAG
        docker push $ACR_REGISTRY/frontend:latest
        docker push $ACR_REGISTRY/backend:$IMAGE_TAG
        docker push $ACR_REGISTRY/backend:latest
    
    - name: Deploy to Azure Container Apps
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Update frontend Container App
          az containerapp update \
            --name frontend \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/frontend:${{ github.sha }} \
            --set-env-vars AZURE_APP_HOSTNAME=${{ vars.AZURE_APP_HOSTNAME }}
          
          # Update backend Container App
          az containerapp update \
            --name backend \
            --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} \
            --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:${{ github.sha }} \
            --set-env-vars \
              ENVIRONMENT=production \
              BACKEND_CORS_ORIGINS='["https://${{ vars.AZURE_APP_HOSTNAME }}"]'
    
    - name: Verify Deployment
      run: |
        # Give services time to start
        sleep 30
        
        # Verify both services are responding
        curl -f https://api.${{ vars.AZURE_APP_HOSTNAME }}/api/health
        curl -f https://${{ vars.AZURE_APP_HOSTNAME }}
    
    - name: Tag Release
      if: success()
      run: |
        git tag v$(date +%Y%m%d.%H%M%S)-${{ github.sha }}
        git push origin --tags